# coding: utf-8

"""
    Stytch

    This is the Stytch api.  You can find out more about Stytch at  [stytch.io](https://stytch.io).   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@stytch.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MagicLinkSend(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'method_id': 'str',
        'magic_link_url': 'str',
        'expiration': 'str',
        'template_id': 'str',
        'options': 'MagicLinkSendOptions',
        'attributes': 'Attributes'
    }

    attribute_map = {
        'user_id': 'user_id',
        'method_id': 'method_id',
        'magic_link_url': 'magic_link_url',
        'expiration': 'expiration',
        'template_id': 'template_id',
        'options': 'options',
        'attributes': 'attributes'
    }

    def __init__(self, user_id=None, method_id=None, magic_link_url=None, expiration=None, template_id=None, options=None, attributes=None):  # noqa: E501
        """MagicLinkSend - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._method_id = None
        self._magic_link_url = None
        self._expiration = None
        self._template_id = None
        self._options = None
        self._attributes = None
        self.discriminator = None
        self.user_id = user_id
        self.method_id = method_id
        if magic_link_url is not None:
            self.magic_link_url = magic_link_url
        if expiration is not None:
            self.expiration = expiration
        if template_id is not None:
            self.template_id = template_id
        if options is not None:
            self.options = options
        if attributes is not None:
            self.attributes = attributes

    @property
    def user_id(self):
        """Gets the user_id of this MagicLinkSend.  # noqa: E501


        :return: The user_id of this MagicLinkSend.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MagicLinkSend.


        :param user_id: The user_id of this MagicLinkSend.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def method_id(self):
        """Gets the method_id of this MagicLinkSend.  # noqa: E501

        The method id for where to send the magic link, such as an email_id.  # noqa: E501

        :return: The method_id of this MagicLinkSend.  # noqa: E501
        :rtype: str
        """
        return self._method_id

    @method_id.setter
    def method_id(self, method_id):
        """Sets the method_id of this MagicLinkSend.

        The method id for where to send the magic link, such as an email_id.  # noqa: E501

        :param method_id: The method_id of this MagicLinkSend.  # noqa: E501
        :type: str
        """
        if method_id is None:
            raise ValueError("Invalid value for `method_id`, must not be `None`")  # noqa: E501

        self._method_id = method_id

    @property
    def magic_link_url(self):
        """Gets the magic_link_url of this MagicLinkSend.  # noqa: E501

        The url the user clicks from the email magic link. This should be a url that your app receives and parses and subsequently send an api request to authenticate the magic link and log in the user.  # noqa: E501

        :return: The magic_link_url of this MagicLinkSend.  # noqa: E501
        :rtype: str
        """
        return self._magic_link_url

    @magic_link_url.setter
    def magic_link_url(self, magic_link_url):
        """Sets the magic_link_url of this MagicLinkSend.

        The url the user clicks from the email magic link. This should be a url that your app receives and parses and subsequently send an api request to authenticate the magic link and log in the user.  # noqa: E501

        :param magic_link_url: The magic_link_url of this MagicLinkSend.  # noqa: E501
        :type: str
        """

        self._magic_link_url = magic_link_url

    @property
    def expiration(self):
        """Gets the expiration of this MagicLinkSend.  # noqa: E501

        Set the expiration for the email magic link, in minutes. By default, it expires in 1 hour. The minimum expiration is 5 minutes and the maximum is 7 days (10080 mins).  # noqa: E501

        :return: The expiration of this MagicLinkSend.  # noqa: E501
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this MagicLinkSend.

        Set the expiration for the email magic link, in minutes. By default, it expires in 1 hour. The minimum expiration is 5 minutes and the maximum is 7 days (10080 mins).  # noqa: E501

        :param expiration: The expiration of this MagicLinkSend.  # noqa: E501
        :type: str
        """

        self._expiration = expiration

    @property
    def template_id(self):
        """Gets the template_id of this MagicLinkSend.  # noqa: E501

        The template id to use for the magic link, for example the template_id that corresponds to a specific email format.  # noqa: E501

        :return: The template_id of this MagicLinkSend.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this MagicLinkSend.

        The template id to use for the magic link, for example the template_id that corresponds to a specific email format.  # noqa: E501

        :param template_id: The template_id of this MagicLinkSend.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def options(self):
        """Gets the options of this MagicLinkSend.  # noqa: E501


        :return: The options of this MagicLinkSend.  # noqa: E501
        :rtype: MagicLinkSendOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this MagicLinkSend.


        :param options: The options of this MagicLinkSend.  # noqa: E501
        :type: MagicLinkSendOptions
        """

        self._options = options

    @property
    def attributes(self):
        """Gets the attributes of this MagicLinkSend.  # noqa: E501


        :return: The attributes of this MagicLinkSend.  # noqa: E501
        :rtype: Attributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this MagicLinkSend.


        :param attributes: The attributes of this MagicLinkSend.  # noqa: E501
        :type: Attributes
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MagicLinkSend, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MagicLinkSend):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
