# coding: utf-8

"""
    Stytch

    This is the Stytch api.  You can find out more about Stytch at  [stytch.io](https://stytch.io).   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@stytch.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MagicLinkSendOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_match': 'bool',
        'user_agent_match': 'bool'
    }

    attribute_map = {
        'ip_match': 'ip_match',
        'user_agent_match': 'user_agent_match'
    }

    def __init__(self, ip_match=None, user_agent_match=None):  # noqa: E501
        """MagicLinkSendOptions - a model defined in Swagger"""  # noqa: E501
        self._ip_match = None
        self._user_agent_match = None
        self.discriminator = None
        if ip_match is not None:
            self.ip_match = ip_match
        if user_agent_match is not None:
            self.user_agent_match = user_agent_match

    @property
    def ip_match(self):
        """Gets the ip_match of this MagicLinkSendOptions.  # noqa: E501

        Require that the ip address the magic link was requested from matches the ip address it's clicked from.  # noqa: E501

        :return: The ip_match of this MagicLinkSendOptions.  # noqa: E501
        :rtype: bool
        """
        return self._ip_match

    @ip_match.setter
    def ip_match(self, ip_match):
        """Sets the ip_match of this MagicLinkSendOptions.

        Require that the ip address the magic link was requested from matches the ip address it's clicked from.  # noqa: E501

        :param ip_match: The ip_match of this MagicLinkSendOptions.  # noqa: E501
        :type: bool
        """

        self._ip_match = ip_match

    @property
    def user_agent_match(self):
        """Gets the user_agent_match of this MagicLinkSendOptions.  # noqa: E501

        Require that the user agent the magic link was requested from matches the user agent it's clicked from.  # noqa: E501

        :return: The user_agent_match of this MagicLinkSendOptions.  # noqa: E501
        :rtype: bool
        """
        return self._user_agent_match

    @user_agent_match.setter
    def user_agent_match(self, user_agent_match):
        """Sets the user_agent_match of this MagicLinkSendOptions.

        Require that the user agent the magic link was requested from matches the user agent it's clicked from.  # noqa: E501

        :param user_agent_match: The user_agent_match of this MagicLinkSendOptions.  # noqa: E501
        :type: bool
        """

        self._user_agent_match = user_agent_match

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MagicLinkSendOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MagicLinkSendOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
