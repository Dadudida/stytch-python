# coding: utf-8

"""
    Stytch

    This is the Stytch api.  You can find out more about Stytch at  [stytch.io](https://stytch.io).   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@stytch.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MagicLinksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def post_user_magic_link(self, body, **kwargs):  # noqa: E501
        """Send magic link  # noqa: E501

        Send a magic link to the user. You can optionally include additional security measures such as requiring the ip address the link is requested from match the one it's clicked from.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_user_magic_link(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MagicLinkSend body: (required)
        :return: MagicLinkSendResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_user_magic_link_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_user_magic_link_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_user_magic_link_with_http_info(self, body, **kwargs):  # noqa: E501
        """Send magic link  # noqa: E501

        Send a magic link to the user. You can optionally include additional security measures such as requiring the ip address the link is requested from match the one it's clicked from.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_user_magic_link_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MagicLinkSend body: (required)
        :return: MagicLinkSendResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_user_magic_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_user_magic_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/magic_links/send', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MagicLinkSendResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_user_magic_link_authenticate(self, body, magic_link_id, **kwargs):  # noqa: E501
        """Authenticate magic link  # noqa: E501

        Authenticate a user given a magic link. This endpoint verifies that the link is valid, hasn't expired, and any optional security settings such as ip match or user agent match are satisfied. Not to be confused with the emails verify endpoint meant for initial, one time verification that the correct email was supplied during sign up.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_user_magic_link_authenticate(body, magic_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MagicLinkAuthenticate body: Magic link object (required)
        :param str magic_link_id: (required)
        :return: MagicLinkAuthenticateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_user_magic_link_authenticate_with_http_info(body, magic_link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_user_magic_link_authenticate_with_http_info(body, magic_link_id, **kwargs)  # noqa: E501
            return data

    def post_user_magic_link_authenticate_with_http_info(self, body, magic_link_id, **kwargs):  # noqa: E501
        """Authenticate magic link  # noqa: E501

        Authenticate a user given a magic link. This endpoint verifies that the link is valid, hasn't expired, and any optional security settings such as ip match or user agent match are satisfied. Not to be confused with the emails verify endpoint meant for initial, one time verification that the correct email was supplied during sign up.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_user_magic_link_authenticate_with_http_info(body, magic_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MagicLinkAuthenticate body: Magic link object (required)
        :param str magic_link_id: (required)
        :return: MagicLinkAuthenticateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'magic_link_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_user_magic_link_authenticate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_user_magic_link_authenticate`")  # noqa: E501
        # verify the required parameter 'magic_link_id' is set
        if ('magic_link_id' not in params or
                params['magic_link_id'] is None):
            raise ValueError("Missing the required parameter `magic_link_id` when calling `post_user_magic_link_authenticate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'magic_link_id' in params:
            path_params['magic_link_id'] = params['magic_link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/magic_links/{magic_link_id}/authenticate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MagicLinkAuthenticateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
